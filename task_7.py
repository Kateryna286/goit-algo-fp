# Monte Carlo –¥–ª—è –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤ + –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ—é
# —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ: —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ + matplotlib –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞

import math
import random
from collections import Counter
from typing import Dict, Tuple, List

def simulate_two_dice(n_rolls: int, seed: int = 123) -> Dict[int, int]:
    """–Ü–º—ñ—Ç—É—î n_rolls –∫–∏–¥–∫—ñ–≤ –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤. –ü–æ–≤–µ—Ä—Ç–∞—î –ª—ñ—á–∏–ª—å–Ω–∏–∫–∏ —Å—É–º 2..12."""
    if n_rolls <= 0:
        raise ValueError("n_rolls –º–∞—î –±—É—Ç–∏ > 0")
    random.seed(seed)
    cnt = Counter()
    for _ in range(n_rolls):
        s = random.randint(1, 6) + random.randint(1, 6)
        cnt[s] += 1
    return {s: cnt.get(s, 0) for s in range(2, 13)}

def analytic_distribution() -> Tuple[Dict[int, int], Dict[int, float]]:
    """–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–æ—Å–æ–±—ñ–≤ —ñ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç—ñ –¥–ª—è —Å—É–º 2..12."""
    ways = {2:1, 3:2, 4:3, 5:4, 6:5, 7:6, 8:5, 9:4, 10:3, 11:2, 12:1}
    total = 36
    probs = {s: ways[s] / total for s in range(2, 13)}
    return ways, probs

def build_table(counts_mc: Dict[int, int], n_rolls: int):
    """–ì–æ—Ç—É—î —Ç–∞–±–ª–∏—á–Ω—ñ —Ä—è–¥–∫–∏ –∑ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è–º MC vs –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞."""
    _, p_an = analytic_distribution()
    rows: List[Tuple[int, float, float, float, float, int]] = []
    sse = 0.0
    for s in range(2, 13):
        p_mc = counts_mc[s] / n_rolls
        pA = p_an[s]
        abs_err = abs(p_mc - pA)
        rel_err = (abs_err / pA) * 100.0
        sse += (p_mc - pA) ** 2
        rows.append((s, p_mc, pA, abs_err, rel_err, counts_mc[s]))
    rmse = math.sqrt(sse / len(rows))
    return rows, rmse

def print_table(rows):
    print(f"{'Sum':>3} | {'MC prob':>9} | {'Analytic':>9} | {'Abs err':>9} | {'Rel err %':>9} | {'MC count':>8}")
    print("-" * 64)
    for s, p_mc, p_an, ae, re, c in rows:
        print(f"{s:>3} | {p_mc:9.5f} | {p_an:9.5f} | {ae:9.5f} | {re:9.3f} | {c:8d}")

def plot(rows, title="Two dice: Monte Carlo vs Analytic"):
    try:
        import matplotlib.pyplot as plt
    except Exception:
        return  # –≥—Ä–∞—Ñ—ñ–∫ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π
    xs = [r[0] for r in rows]
    mc = [r[1] for r in rows]
    an = [r[2] for r in rows]
    plt.figure(figsize=(10, 5))
    plt.bar(xs, mc, width=0.7, label="Monte Carlo")
    plt.plot(xs, an, marker="o", linewidth=2, label="Analytic")
    plt.xlabel("–°—É–º–∞ –¥–≤–æ—Ö –∫—É–±–∏–∫—ñ–≤")
    plt.ylabel("–ô–º–æ–≤—ñ—Ä–Ω—ñ—Å—Ç—å")
    plt.title(title)
    plt.legend()
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    N = 1_000_000  # –∑–º—ñ–Ω—é–π –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ/—à–≤–∏–¥–∫–æ—Å—Ç—ñ
    counts = simulate_two_dice(N, seed=123)
    rows, rmse = build_table(counts, N)
    print_table(rows)
    print(f"\nRMSE (Monte Carlo vs –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞): {rmse:.6f}")
    plot(rows, title=f"Two dice: Monte Carlo vs Analytic (N={N:,})")


# –í–∏—Å–Ω–æ–≤–∫–∏

# –†–æ–∑–ø–æ–¥—ñ–ª, –æ—Ç—Ä–∏–º–∞–Ω–∏–π –º–µ—Ç–æ–¥–æ–º –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ, –ø—Ä–∞–∫—Ç–∏—á–Ω–æ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–º: –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –≤–∏–ø–∞–¥–∞—î —Å—É–º–∞ 7 (~16.67%), 
# –¥–∞–ª—ñ —Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ —Å–ø–∞–¥–∞—î –¥–æ –∫—Ä–∞—ó–≤ (2 —ñ 12 ~2.78%).

# –î–ª—è ùëÅ=1_000_000 –∫–∏–¥–∫—ñ–≤ (seed=123) —Å–µ—Ä–µ–¥–Ω—å–æ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω–∞ –ø–æ—Ö–∏–±–∫–∞ RMSE ‚âà 0.000246; 
# —Ç–∏–ø–æ–≤—ñ –∞–±—Å–æ–ª—é—Ç–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó —Å—É–º–∏ ‚Äî –º–µ–Ω—à—ñ –∑–∞ 0.001.

# –ó—ñ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è–º –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Å–∏–º—É–ª—è—Ü—ñ–π –ø–æ—Ö–∏–±–∫–∞ –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –ø—Ä–∏–±–ª–∏–∑–Ω–æ —è–∫ ùëÇ(1/ùëÅ) (–∑–∞–∫–æ–Ω –≤–µ–ª–∏–∫–∏—Ö —á–∏—Å–µ–ª).

# –í–∏—Å–Ω–æ–≤–æ–∫: –ú–æ–Ω—Ç–µ-–ö–∞—Ä–ª–æ –∫–æ—Ä–µ–∫—Ç–Ω–æ –≤—ñ–¥—Ç–≤–æ—Ä—é—î —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω–∏–π ¬´—Ç—Ä–∏–∫—É—Ç–Ω–∏–π¬ª —Ä–æ–∑–ø–æ–¥—ñ–ª —Å—É–º –¥–≤–æ—Ö —á–µ—Å–Ω–∏—Ö –∫—É–±–∏–∫—ñ–≤ 
# —ñ –¥–∞—î –¥—É–∂–µ —Ç–æ—á–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –π–º–æ–≤—ñ—Ä–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –≤–µ–ª–∏–∫–æ–º—É N.
